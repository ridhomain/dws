// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"context"
)

// Injectors from wire.go:

// InitializeApp creates and initializes a new application instance with all its dependencies.
// Wire will use the providers in ProviderSet and the NewApp function to build the *App.
// The cleanup function returned can be used to sync loggers or close other resources.
func InitializeApp(ctx context.Context) (*App, func(), error) {
	provider, err := ConfigProvider()
	if err != nil {
		return nil, nil, err
	}
	logger, err := LoggerProvider(provider)
	if err != nil {
		return nil, nil, err
	}
	serveMux := HTTPServeMuxProvider()
	server := HTTPGracefulServerProvider(provider, serveMux)
	handlerFunc := GenerateTokenHandlerProvider(provider, logger)
	v := TokenGenerationAuthMiddlewareProvider(provider, logger)
	client, cleanup, err := RedisClientProvider(provider, logger)
	if err != nil {
		return nil, nil, err
	}
	tokenCacheStore := TokenCacheStoreProvider(client, logger)
	authService := AuthServiceProvider(logger, provider, tokenCacheStore)
	sessionLockManager := SessionLockManagerProvider(client, logger)
	killSwitchPubSubAdapter := KillSwitchPubSubAdapterProvider(client, logger)
	connectionManager := ConnectionManagerProvider(logger, provider, sessionLockManager, killSwitchPubSubAdapter, killSwitchPubSubAdapter)
	handler := WebsocketHandlerProvider(logger, provider, connectionManager)
	router := WebsocketRouterProvider(logger, provider, authService, handler)
	app, cleanup2, err := NewApp(provider, logger, serveMux, server, handlerFunc, v, router, connectionManager)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
