// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dws_message_fwd.proto

package dws_message_fwd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageForwardingService_PushEvent_FullMethodName = "/dws_message_fwd.MessageForwardingService/PushEvent"
)

// MessageForwardingServiceClient is the client API for MessageForwardingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageForwardingServiceClient interface {
	PushEvent(ctx context.Context, in *PushEventRequest, opts ...grpc.CallOption) (*PushEventResponse, error)
}

type messageForwardingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageForwardingServiceClient(cc grpc.ClientConnInterface) MessageForwardingServiceClient {
	return &messageForwardingServiceClient{cc}
}

func (c *messageForwardingServiceClient) PushEvent(ctx context.Context, in *PushEventRequest, opts ...grpc.CallOption) (*PushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushEventResponse)
	err := c.cc.Invoke(ctx, MessageForwardingService_PushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageForwardingServiceServer is the server API for MessageForwardingService service.
// All implementations must embed UnimplementedMessageForwardingServiceServer
// for forward compatibility.
type MessageForwardingServiceServer interface {
	PushEvent(context.Context, *PushEventRequest) (*PushEventResponse, error)
	mustEmbedUnimplementedMessageForwardingServiceServer()
}

// UnimplementedMessageForwardingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageForwardingServiceServer struct{}

func (UnimplementedMessageForwardingServiceServer) PushEvent(context.Context, *PushEventRequest) (*PushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvent not implemented")
}
func (UnimplementedMessageForwardingServiceServer) mustEmbedUnimplementedMessageForwardingServiceServer() {
}
func (UnimplementedMessageForwardingServiceServer) testEmbeddedByValue() {}

// UnsafeMessageForwardingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageForwardingServiceServer will
// result in compilation errors.
type UnsafeMessageForwardingServiceServer interface {
	mustEmbedUnimplementedMessageForwardingServiceServer()
}

func RegisterMessageForwardingServiceServer(s grpc.ServiceRegistrar, srv MessageForwardingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageForwardingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageForwardingService_ServiceDesc, srv)
}

func _MessageForwardingService_PushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageForwardingServiceServer).PushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageForwardingService_PushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageForwardingServiceServer).PushEvent(ctx, req.(*PushEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageForwardingService_ServiceDesc is the grpc.ServiceDesc for MessageForwardingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageForwardingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dws_message_fwd.MessageForwardingService",
	HandlerType: (*MessageForwardingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushEvent",
			Handler:    _MessageForwardingService_PushEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dws_message_fwd.proto",
}
